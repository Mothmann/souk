
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model category
 */

export type category = {
  ID: number
  name: string
  description: string
}

/**
 * Model orders
 */

export type orders = {
  ID: number
  Shipping_Address: string
  Shipping_Date: Date
  ProductID: number
  userID: number
}

/**
 * Model product
 */

export type product = {
  ID: number
  name: string
  description: string
  UnitsinStock: number
  PicturePath: string
}

/**
 * Model CategoriesOnProducts
 */

export type CategoriesOnProducts = {
  productID: number
  categoryID: number
}

/**
 * Model user
 */

export type user = {
  ID: number
  username: string
  password: string
  role: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<GlobalReject>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<GlobalReject>;

  /**
   * `prisma.categoriesOnProducts`: Exposes CRUD operations for the **CategoriesOnProducts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriesOnProducts
    * const categoriesOnProducts = await prisma.categoriesOnProducts.findMany()
    * ```
    */
  get categoriesOnProducts(): Prisma.CategoriesOnProductsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.21.2
   * Query Engine version: e421996c87d5f3c8f7eeadd502d4ad402c89464d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    category: 'category',
    orders: 'orders',
    product: 'product',
    CategoriesOnProducts: 'CategoriesOnProducts',
    user: 'user'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model category
   */


  export type AggregateCategory = {
    count: CategoryCountAggregateOutputType | null
    avg: CategoryAvgAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    ID: number | null
  }

  export type CategorySumAggregateOutputType = {
    ID: number | null
  }

  export type CategoryMinAggregateOutputType = {
    ID: number | null
    name: string | null
    description: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    ID: number | null
    name: string | null
    description: string | null
  }

  export type CategoryCountAggregateOutputType = {
    ID: number
    name: number
    description: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    ID?: true
  }

  export type CategorySumAggregateInputType = {
    ID?: true
  }

  export type CategoryMinAggregateInputType = {
    ID?: true
    name?: true
    description?: true
  }

  export type CategoryMaxAggregateInputType = {
    ID?: true
    name?: true
    description?: true
  }

  export type CategoryCountAggregateInputType = {
    ID?: true
    name?: true
    description?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which category to aggregate.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateCategory]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }


    
    
  export type CategoryGroupByArgs = {
    where?: categoryWhereInput
    orderBy?: Enumerable<categoryOrderByInput>
    by: Array<CategoryScalarFieldEnum>
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: CategoryCountAggregateInputType | true
    avg?: CategoryAvgAggregateInputType
    sum?: CategorySumAggregateInputType
    min?: CategoryMinAggregateInputType
    max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    ID: number
    name: string
    description: string
    count: CategoryCountAggregateOutputType | null
    avg: CategoryAvgAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Promise<Array<
    PickArray<CategoryGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: GetScalarType<T[P], CategoryGroupByOutputType[P]>
    }
  >>
    

  export type categorySelect = {
    ID?: boolean
    name?: boolean
    description?: boolean
    products?: boolean | CategoriesOnProductsFindManyArgs
  }

  export type categoryInclude = {
    products?: boolean | CategoriesOnProductsFindManyArgs
  }

  export type categoryGetPayload<
    S extends boolean | null | undefined | categoryArgs,
    U = keyof S
      > = S extends true
        ? category
    : S extends undefined
    ? never
    : S extends categoryArgs | categoryFindManyArgs
    ?'include' extends U
    ? category  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'products'
        ? Array < CategoriesOnProductsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof category ?category [P]
  : 
          P extends 'products'
        ? Array < CategoriesOnProductsGetPayload<S['select'][P]>>  : never
  } 
    : category
  : category


  type categoryCountArgs = Merge<
    Omit<categoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface categoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'category'> extends True ? CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>> : CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'category'> extends True ? CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>> : CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const categoryWithIDOnly = await prisma.category.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs>(
      args?: SelectSubset<T, categoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<category>>, PrismaPromise<Array<categoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs>(
      args: SelectSubset<T, categoryCreateArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoryCreateManyArgs>(
      args?: SelectSubset<T, categoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs>(
      args: SelectSubset<T, categoryDeleteArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs>(
      args: SelectSubset<T, categoryUpdateArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs>(
      args?: SelectSubset<T, categoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs>(
      args: SelectSubset<T, categoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs>(
      args: SelectSubset<T, categoryUpsertArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends CategoriesOnProductsFindManyArgs = {}>(args?: Subset<T, CategoriesOnProductsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CategoriesOnProducts>>, PrismaPromise<Array<CategoriesOnProductsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Throw an Error if a category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which category to fetch.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category findFirst
   */
  export type categoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Throw an Error if a category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which category to fetch.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category findMany
   */
  export type categoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Filter, which categories to fetch.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category create
   */
  export type categoryCreateArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The data needed to create a category.
    **/
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category createMany
   */
  export type categoryCreateManyArgs = {
    data: Enumerable<categoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * category update
   */
  export type categoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The data needed to update a category.
    **/
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs = {
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The filter to search for the category to update in case it exists.
    **/
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
    **/
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Filter which category to delete.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs = {
    where?: categoryWhereInput
  }


  /**
   * category without action
   */
  export type categoryArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
  }



  /**
   * Model orders
   */


  export type AggregateOrders = {
    count: OrdersCountAggregateOutputType | null
    avg: OrdersAvgAggregateOutputType | null
    sum: OrdersSumAggregateOutputType | null
    min: OrdersMinAggregateOutputType | null
    max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    ID: number | null
    ProductID: number | null
    userID: number | null
  }

  export type OrdersSumAggregateOutputType = {
    ID: number | null
    ProductID: number | null
    userID: number | null
  }

  export type OrdersMinAggregateOutputType = {
    ID: number | null
    Shipping_Address: string | null
    Shipping_Date: Date | null
    ProductID: number | null
    userID: number | null
  }

  export type OrdersMaxAggregateOutputType = {
    ID: number | null
    Shipping_Address: string | null
    Shipping_Date: Date | null
    ProductID: number | null
    userID: number | null
  }

  export type OrdersCountAggregateOutputType = {
    ID: number
    Shipping_Address: number
    Shipping_Date: number
    ProductID: number
    userID: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    ID?: true
    ProductID?: true
    userID?: true
  }

  export type OrdersSumAggregateInputType = {
    ID?: true
    ProductID?: true
    userID?: true
  }

  export type OrdersMinAggregateInputType = {
    ID?: true
    Shipping_Address?: true
    Shipping_Date?: true
    ProductID?: true
    userID?: true
  }

  export type OrdersMaxAggregateInputType = {
    ID?: true
    Shipping_Address?: true
    Shipping_Date?: true
    ProductID?: true
    userID?: true
  }

  export type OrdersCountAggregateInputType = {
    ID?: true
    Shipping_Address?: true
    Shipping_Date?: true
    ProductID?: true
    userID?: true
    _all?: true
  }

  export type OrdersAggregateArgs = {
    /**
     * Filter which orders to aggregate.
    **/
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
    **/
    orderBy?: Enumerable<ordersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
    [P in keyof T & keyof AggregateOrders]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }


    
    
  export type OrdersGroupByArgs = {
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByInput>
    by: Array<OrdersScalarFieldEnum>
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: OrdersCountAggregateInputType | true
    avg?: OrdersAvgAggregateInputType
    sum?: OrdersSumAggregateInputType
    min?: OrdersMinAggregateInputType
    max?: OrdersMaxAggregateInputType
  }


  export type OrdersGroupByOutputType = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date
    ProductID: number
    userID: number
    count: OrdersCountAggregateOutputType | null
    avg: OrdersAvgAggregateOutputType | null
    sum: OrdersSumAggregateOutputType | null
    min: OrdersMinAggregateOutputType | null
    max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends OrdersGroupByArgs> = Promise<Array<
    PickArray<OrdersGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: GetScalarType<T[P], OrdersGroupByOutputType[P]>
    }
  >>
    

  export type ordersSelect = {
    ID?: boolean
    Shipping_Address?: boolean
    Shipping_Date?: boolean
    product?: boolean | productArgs
    ProductID?: boolean
    user?: boolean | userArgs
    userID?: boolean
  }

  export type ordersInclude = {
    product?: boolean | productArgs
    user?: boolean | userArgs
  }

  export type ordersGetPayload<
    S extends boolean | null | undefined | ordersArgs,
    U = keyof S
      > = S extends true
        ? orders
    : S extends undefined
    ? never
    : S extends ordersArgs | ordersFindManyArgs
    ?'include' extends U
    ? orders  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'product'
        ? productGetPayload<S['include'][P]> :
        P extends 'user'
        ? userGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof orders ?orders [P]
  : 
          P extends 'product'
        ? productGetPayload<S['select'][P]> :
        P extends 'user'
        ? userGetPayload<S['select'][P]> | null : never
  } 
    : orders
  : orders


  type ordersCountArgs = Merge<
    Omit<ordersFindManyArgs, 'select' | 'include'> & {
      select?: OrdersCountAggregateInputType | true
    }
  >

  export interface ordersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ordersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'orders'> extends True ? CheckSelect<T, Prisma__ordersClient<orders>, Prisma__ordersClient<ordersGetPayload<T>>> : CheckSelect<T, Prisma__ordersClient<orders | null >, Prisma__ordersClient<ordersGetPayload<T> | null >>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ordersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'orders'> extends True ? CheckSelect<T, Prisma__ordersClient<orders>, Prisma__ordersClient<ordersGetPayload<T>>> : CheckSelect<T, Prisma__ordersClient<orders | null >, Prisma__ordersClient<ordersGetPayload<T> | null >>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const ordersWithIDOnly = await prisma.orders.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends ordersFindManyArgs>(
      args?: SelectSubset<T, ordersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<orders>>, PrismaPromise<Array<ordersGetPayload<T>>>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends ordersCreateArgs>(
      args: SelectSubset<T, ordersCreateArgs>
    ): CheckSelect<T, Prisma__ordersClient<orders>, Prisma__ordersClient<ordersGetPayload<T>>>

    /**
     * Create many Orders.
     *     @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ordersCreateManyArgs>(
      args?: SelectSubset<T, ordersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends ordersDeleteArgs>(
      args: SelectSubset<T, ordersDeleteArgs>
    ): CheckSelect<T, Prisma__ordersClient<orders>, Prisma__ordersClient<ordersGetPayload<T>>>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordersUpdateArgs>(
      args: SelectSubset<T, ordersUpdateArgs>
    ): CheckSelect<T, Prisma__ordersClient<orders>, Prisma__ordersClient<ordersGetPayload<T>>>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordersDeleteManyArgs>(
      args?: SelectSubset<T, ordersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordersUpdateManyArgs>(
      args: SelectSubset<T, ordersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends ordersUpsertArgs>(
      args: SelectSubset<T, ordersUpsertArgs>
    ): CheckSelect<T, Prisma__ordersClient<orders>, Prisma__ordersClient<ordersGetPayload<T>>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersGroupByArgs['orderBy'] }
        : { orderBy?: OrdersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ordersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends productArgs = {}>(args?: Subset<T, productArgs>): CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>;

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the orders
    **/
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ordersInclude | null
    /**
     * Throw an Error if a orders can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which orders to fetch.
    **/
    where: ordersWhereUniqueInput
  }


  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the orders
    **/
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ordersInclude | null
    /**
     * Throw an Error if a orders can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which orders to fetch.
    **/
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
    **/
    orderBy?: Enumerable<ordersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
    **/
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
    **/
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * orders findMany
   */
  export type ordersFindManyArgs = {
    /**
     * Select specific fields to fetch from the orders
    **/
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
    **/
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
    **/
    orderBy?: Enumerable<ordersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
    **/
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
    **/
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * orders create
   */
  export type ordersCreateArgs = {
    /**
     * Select specific fields to fetch from the orders
    **/
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ordersInclude | null
    /**
     * The data needed to create a orders.
    **/
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }


  /**
   * orders createMany
   */
  export type ordersCreateManyArgs = {
    data: Enumerable<ordersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * orders update
   */
  export type ordersUpdateArgs = {
    /**
     * Select specific fields to fetch from the orders
    **/
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ordersInclude | null
    /**
     * The data needed to update a orders.
    **/
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
    **/
    where: ordersWhereUniqueInput
  }


  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs = {
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    where?: ordersWhereInput
  }


  /**
   * orders upsert
   */
  export type ordersUpsertArgs = {
    /**
     * Select specific fields to fetch from the orders
    **/
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ordersInclude | null
    /**
     * The filter to search for the orders to update in case it exists.
    **/
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
    **/
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }


  /**
   * orders delete
   */
  export type ordersDeleteArgs = {
    /**
     * Select specific fields to fetch from the orders
    **/
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ordersInclude | null
    /**
     * Filter which orders to delete.
    **/
    where: ordersWhereUniqueInput
  }


  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs = {
    where?: ordersWhereInput
  }


  /**
   * orders without action
   */
  export type ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
    **/
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ordersInclude | null
  }



  /**
   * Model product
   */


  export type AggregateProduct = {
    count: ProductCountAggregateOutputType | null
    avg: ProductAvgAggregateOutputType | null
    sum: ProductSumAggregateOutputType | null
    min: ProductMinAggregateOutputType | null
    max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    ID: number | null
    UnitsinStock: number | null
  }

  export type ProductSumAggregateOutputType = {
    ID: number | null
    UnitsinStock: number | null
  }

  export type ProductMinAggregateOutputType = {
    ID: number | null
    name: string | null
    description: string | null
    UnitsinStock: number | null
    PicturePath: string | null
  }

  export type ProductMaxAggregateOutputType = {
    ID: number | null
    name: string | null
    description: string | null
    UnitsinStock: number | null
    PicturePath: string | null
  }

  export type ProductCountAggregateOutputType = {
    ID: number
    name: number
    description: number
    UnitsinStock: number
    PicturePath: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    ID?: true
    UnitsinStock?: true
  }

  export type ProductSumAggregateInputType = {
    ID?: true
    UnitsinStock?: true
  }

  export type ProductMinAggregateInputType = {
    ID?: true
    name?: true
    description?: true
    UnitsinStock?: true
    PicturePath?: true
  }

  export type ProductMaxAggregateInputType = {
    ID?: true
    name?: true
    description?: true
    UnitsinStock?: true
    PicturePath?: true
  }

  export type ProductCountAggregateInputType = {
    ID?: true
    name?: true
    description?: true
    UnitsinStock?: true
    PicturePath?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which product to aggregate.
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
    **/
    orderBy?: Enumerable<productOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
    [P in keyof T & keyof AggregateProduct]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }


    
    
  export type ProductGroupByArgs = {
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByInput>
    by: Array<ProductScalarFieldEnum>
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: ProductCountAggregateInputType | true
    avg?: ProductAvgAggregateInputType
    sum?: ProductSumAggregateInputType
    min?: ProductMinAggregateInputType
    max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    ID: number
    name: string
    description: string
    UnitsinStock: number
    PicturePath: string
    count: ProductCountAggregateOutputType | null
    avg: ProductAvgAggregateOutputType | null
    sum: ProductSumAggregateOutputType | null
    min: ProductMinAggregateOutputType | null
    max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Promise<Array<
    PickArray<ProductGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof ProductGroupByOutputType))]: GetScalarType<T[P], ProductGroupByOutputType[P]>
    }
  >>
    

  export type productSelect = {
    ID?: boolean
    name?: boolean
    description?: boolean
    UnitsinStock?: boolean
    PicturePath?: boolean
    categories?: boolean | CategoriesOnProductsFindManyArgs
    orders?: boolean | ordersFindManyArgs
  }

  export type productInclude = {
    categories?: boolean | CategoriesOnProductsFindManyArgs
    orders?: boolean | ordersFindManyArgs
  }

  export type productGetPayload<
    S extends boolean | null | undefined | productArgs,
    U = keyof S
      > = S extends true
        ? product
    : S extends undefined
    ? never
    : S extends productArgs | productFindManyArgs
    ?'include' extends U
    ? product  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'categories'
        ? Array < CategoriesOnProductsGetPayload<S['include'][P]>>  :
        P extends 'orders'
        ? Array < ordersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof product ?product [P]
  : 
          P extends 'categories'
        ? Array < CategoriesOnProductsGetPayload<S['select'][P]>>  :
        P extends 'orders'
        ? Array < ordersGetPayload<S['select'][P]>>  : never
  } 
    : product
  : product


  type productCountArgs = Merge<
    Omit<productFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface productDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product'> extends True ? CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>> : CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product'> extends True ? CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>> : CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const productWithIDOnly = await prisma.product.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends productFindManyArgs>(
      args?: SelectSubset<T, productFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<product>>, PrismaPromise<Array<productGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends productCreateArgs>(
      args: SelectSubset<T, productCreateArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {productCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productCreateManyArgs>(
      args?: SelectSubset<T, productCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends productDeleteArgs>(
      args: SelectSubset<T, productDeleteArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productUpdateArgs>(
      args: SelectSubset<T, productUpdateArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productDeleteManyArgs>(
      args?: SelectSubset<T, productDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productUpdateManyArgs>(
      args: SelectSubset<T, productUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends productUpsertArgs>(
      args: SelectSubset<T, productUpsertArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categories<T extends CategoriesOnProductsFindManyArgs = {}>(args?: Subset<T, CategoriesOnProductsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CategoriesOnProducts>>, PrismaPromise<Array<CategoriesOnProductsGetPayload<T>>>>;

    orders<T extends ordersFindManyArgs = {}>(args?: Subset<T, ordersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<orders>>, PrismaPromise<Array<ordersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * product findUnique
   */
  export type productFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the product
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: productInclude | null
    /**
     * Throw an Error if a product can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product to fetch.
    **/
    where: productWhereUniqueInput
  }


  /**
   * product findFirst
   */
  export type productFindFirstArgs = {
    /**
     * Select specific fields to fetch from the product
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: productInclude | null
    /**
     * Throw an Error if a product can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product to fetch.
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
    **/
    orderBy?: Enumerable<productOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product findMany
   */
  export type productFindManyArgs = {
    /**
     * Select specific fields to fetch from the product
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: productInclude | null
    /**
     * Filter, which products to fetch.
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
    **/
    orderBy?: Enumerable<productOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product create
   */
  export type productCreateArgs = {
    /**
     * Select specific fields to fetch from the product
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: productInclude | null
    /**
     * The data needed to create a product.
    **/
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }


  /**
   * product createMany
   */
  export type productCreateManyArgs = {
    data: Enumerable<productCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product update
   */
  export type productUpdateArgs = {
    /**
     * Select specific fields to fetch from the product
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: productInclude | null
    /**
     * The data needed to update a product.
    **/
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
    **/
    where: productWhereUniqueInput
  }


  /**
   * product updateMany
   */
  export type productUpdateManyArgs = {
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    where?: productWhereInput
  }


  /**
   * product upsert
   */
  export type productUpsertArgs = {
    /**
     * Select specific fields to fetch from the product
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: productInclude | null
    /**
     * The filter to search for the product to update in case it exists.
    **/
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
    **/
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }


  /**
   * product delete
   */
  export type productDeleteArgs = {
    /**
     * Select specific fields to fetch from the product
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: productInclude | null
    /**
     * Filter which product to delete.
    **/
    where: productWhereUniqueInput
  }


  /**
   * product deleteMany
   */
  export type productDeleteManyArgs = {
    where?: productWhereInput
  }


  /**
   * product without action
   */
  export type productArgs = {
    /**
     * Select specific fields to fetch from the product
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: productInclude | null
  }



  /**
   * Model CategoriesOnProducts
   */


  export type AggregateCategoriesOnProducts = {
    count: CategoriesOnProductsCountAggregateOutputType | null
    avg: CategoriesOnProductsAvgAggregateOutputType | null
    sum: CategoriesOnProductsSumAggregateOutputType | null
    min: CategoriesOnProductsMinAggregateOutputType | null
    max: CategoriesOnProductsMaxAggregateOutputType | null
  }

  export type CategoriesOnProductsAvgAggregateOutputType = {
    productID: number | null
    categoryID: number | null
  }

  export type CategoriesOnProductsSumAggregateOutputType = {
    productID: number | null
    categoryID: number | null
  }

  export type CategoriesOnProductsMinAggregateOutputType = {
    productID: number | null
    categoryID: number | null
  }

  export type CategoriesOnProductsMaxAggregateOutputType = {
    productID: number | null
    categoryID: number | null
  }

  export type CategoriesOnProductsCountAggregateOutputType = {
    productID: number
    categoryID: number
    _all: number
  }


  export type CategoriesOnProductsAvgAggregateInputType = {
    productID?: true
    categoryID?: true
  }

  export type CategoriesOnProductsSumAggregateInputType = {
    productID?: true
    categoryID?: true
  }

  export type CategoriesOnProductsMinAggregateInputType = {
    productID?: true
    categoryID?: true
  }

  export type CategoriesOnProductsMaxAggregateInputType = {
    productID?: true
    categoryID?: true
  }

  export type CategoriesOnProductsCountAggregateInputType = {
    productID?: true
    categoryID?: true
    _all?: true
  }

  export type CategoriesOnProductsAggregateArgs = {
    /**
     * Filter which CategoriesOnProducts to aggregate.
    **/
    where?: CategoriesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnProducts to fetch.
    **/
    orderBy?: Enumerable<CategoriesOnProductsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CategoriesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnProducts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnProducts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriesOnProducts
    **/
    count?: true | CategoriesOnProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CategoriesOnProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CategoriesOnProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CategoriesOnProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CategoriesOnProductsMaxAggregateInputType
  }

  export type GetCategoriesOnProductsAggregateType<T extends CategoriesOnProductsAggregateArgs> = {
    [P in keyof T & keyof AggregateCategoriesOnProducts]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriesOnProducts[P]>
      : GetScalarType<T[P], AggregateCategoriesOnProducts[P]>
  }


    
    
  export type CategoriesOnProductsGroupByArgs = {
    where?: CategoriesOnProductsWhereInput
    orderBy?: Enumerable<CategoriesOnProductsOrderByInput>
    by: Array<CategoriesOnProductsScalarFieldEnum>
    having?: CategoriesOnProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: CategoriesOnProductsCountAggregateInputType | true
    avg?: CategoriesOnProductsAvgAggregateInputType
    sum?: CategoriesOnProductsSumAggregateInputType
    min?: CategoriesOnProductsMinAggregateInputType
    max?: CategoriesOnProductsMaxAggregateInputType
  }


  export type CategoriesOnProductsGroupByOutputType = {
    productID: number
    categoryID: number
    count: CategoriesOnProductsCountAggregateOutputType | null
    avg: CategoriesOnProductsAvgAggregateOutputType | null
    sum: CategoriesOnProductsSumAggregateOutputType | null
    min: CategoriesOnProductsMinAggregateOutputType | null
    max: CategoriesOnProductsMaxAggregateOutputType | null
  }

  type GetCategoriesOnProductsGroupByPayload<T extends CategoriesOnProductsGroupByArgs> = Promise<Array<
    PickArray<CategoriesOnProductsGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof CategoriesOnProductsGroupByOutputType))]: GetScalarType<T[P], CategoriesOnProductsGroupByOutputType[P]>
    }
  >>
    

  export type CategoriesOnProductsSelect = {
    product?: boolean | productArgs
    productID?: boolean
    category?: boolean | categoryArgs
    categoryID?: boolean
  }

  export type CategoriesOnProductsInclude = {
    product?: boolean | productArgs
    category?: boolean | categoryArgs
  }

  export type CategoriesOnProductsGetPayload<
    S extends boolean | null | undefined | CategoriesOnProductsArgs,
    U = keyof S
      > = S extends true
        ? CategoriesOnProducts
    : S extends undefined
    ? never
    : S extends CategoriesOnProductsArgs | CategoriesOnProductsFindManyArgs
    ?'include' extends U
    ? CategoriesOnProducts  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'product'
        ? productGetPayload<S['include'][P]> :
        P extends 'category'
        ? categoryGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof CategoriesOnProducts ?CategoriesOnProducts [P]
  : 
          P extends 'product'
        ? productGetPayload<S['select'][P]> :
        P extends 'category'
        ? categoryGetPayload<S['select'][P]> : never
  } 
    : CategoriesOnProducts
  : CategoriesOnProducts


  type CategoriesOnProductsCountArgs = Merge<
    Omit<CategoriesOnProductsFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesOnProductsCountAggregateInputType | true
    }
  >

  export interface CategoriesOnProductsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CategoriesOnProducts that matches the filter.
     * @param {CategoriesOnProductsFindUniqueArgs} args - Arguments to find a CategoriesOnProducts
     * @example
     * // Get one CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesOnProductsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoriesOnProductsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CategoriesOnProducts'> extends True ? CheckSelect<T, Prisma__CategoriesOnProductsClient<CategoriesOnProducts>, Prisma__CategoriesOnProductsClient<CategoriesOnProductsGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesOnProductsClient<CategoriesOnProducts | null >, Prisma__CategoriesOnProductsClient<CategoriesOnProductsGetPayload<T> | null >>

    /**
     * Find the first CategoriesOnProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnProductsFindFirstArgs} args - Arguments to find a CategoriesOnProducts
     * @example
     * // Get one CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesOnProductsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoriesOnProductsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CategoriesOnProducts'> extends True ? CheckSelect<T, Prisma__CategoriesOnProductsClient<CategoriesOnProducts>, Prisma__CategoriesOnProductsClient<CategoriesOnProductsGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesOnProductsClient<CategoriesOnProducts | null >, Prisma__CategoriesOnProductsClient<CategoriesOnProductsGetPayload<T> | null >>

    /**
     * Find zero or more CategoriesOnProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnProductsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findMany()
     * 
     * // Get first 10 CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.findMany({ take: 10 })
     * 
     * // Only select the `productID`
     * const categoriesOnProductsWithProductIDOnly = await prisma.categoriesOnProducts.findMany({ select: { productID: true } })
     * 
    **/
    findMany<T extends CategoriesOnProductsFindManyArgs>(
      args?: SelectSubset<T, CategoriesOnProductsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CategoriesOnProducts>>, PrismaPromise<Array<CategoriesOnProductsGetPayload<T>>>>

    /**
     * Create a CategoriesOnProducts.
     * @param {CategoriesOnProductsCreateArgs} args - Arguments to create a CategoriesOnProducts.
     * @example
     * // Create one CategoriesOnProducts
     * const CategoriesOnProducts = await prisma.categoriesOnProducts.create({
     *   data: {
     *     // ... data to create a CategoriesOnProducts
     *   }
     * })
     * 
    **/
    create<T extends CategoriesOnProductsCreateArgs>(
      args: SelectSubset<T, CategoriesOnProductsCreateArgs>
    ): CheckSelect<T, Prisma__CategoriesOnProductsClient<CategoriesOnProducts>, Prisma__CategoriesOnProductsClient<CategoriesOnProductsGetPayload<T>>>

    /**
     * Create many CategoriesOnProducts.
     *     @param {CategoriesOnProductsCreateManyArgs} args - Arguments to create many CategoriesOnProducts.
     *     @example
     *     // Create many CategoriesOnProducts
     *     const categoriesOnProducts = await prisma.categoriesOnProducts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesOnProductsCreateManyArgs>(
      args?: SelectSubset<T, CategoriesOnProductsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CategoriesOnProducts.
     * @param {CategoriesOnProductsDeleteArgs} args - Arguments to delete one CategoriesOnProducts.
     * @example
     * // Delete one CategoriesOnProducts
     * const CategoriesOnProducts = await prisma.categoriesOnProducts.delete({
     *   where: {
     *     // ... filter to delete one CategoriesOnProducts
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesOnProductsDeleteArgs>(
      args: SelectSubset<T, CategoriesOnProductsDeleteArgs>
    ): CheckSelect<T, Prisma__CategoriesOnProductsClient<CategoriesOnProducts>, Prisma__CategoriesOnProductsClient<CategoriesOnProductsGetPayload<T>>>

    /**
     * Update one CategoriesOnProducts.
     * @param {CategoriesOnProductsUpdateArgs} args - Arguments to update one CategoriesOnProducts.
     * @example
     * // Update one CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesOnProductsUpdateArgs>(
      args: SelectSubset<T, CategoriesOnProductsUpdateArgs>
    ): CheckSelect<T, Prisma__CategoriesOnProductsClient<CategoriesOnProducts>, Prisma__CategoriesOnProductsClient<CategoriesOnProductsGetPayload<T>>>

    /**
     * Delete zero or more CategoriesOnProducts.
     * @param {CategoriesOnProductsDeleteManyArgs} args - Arguments to filter CategoriesOnProducts to delete.
     * @example
     * // Delete a few CategoriesOnProducts
     * const { count } = await prisma.categoriesOnProducts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesOnProductsDeleteManyArgs>(
      args?: SelectSubset<T, CategoriesOnProductsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesOnProductsUpdateManyArgs>(
      args: SelectSubset<T, CategoriesOnProductsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriesOnProducts.
     * @param {CategoriesOnProductsUpsertArgs} args - Arguments to update or create a CategoriesOnProducts.
     * @example
     * // Update or create a CategoriesOnProducts
     * const categoriesOnProducts = await prisma.categoriesOnProducts.upsert({
     *   create: {
     *     // ... data to create a CategoriesOnProducts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriesOnProducts we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesOnProductsUpsertArgs>(
      args: SelectSubset<T, CategoriesOnProductsUpsertArgs>
    ): CheckSelect<T, Prisma__CategoriesOnProductsClient<CategoriesOnProducts>, Prisma__CategoriesOnProductsClient<CategoriesOnProductsGetPayload<T>>>

    /**
     * Count the number of CategoriesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnProductsCountArgs} args - Arguments to filter CategoriesOnProducts to count.
     * @example
     * // Count the number of CategoriesOnProducts
     * const count = await prisma.categoriesOnProducts.count({
     *   where: {
     *     // ... the filter for the CategoriesOnProducts we want to count
     *   }
     * })
    **/
    count<T extends CategoriesOnProductsCountArgs>(
      args?: Subset<T, CategoriesOnProductsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesOnProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesOnProductsAggregateArgs>(args: Subset<T, CategoriesOnProductsAggregateArgs>): PrismaPromise<GetCategoriesOnProductsAggregateType<T>>

    /**
     * Group by CategoriesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesOnProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesOnProductsGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesOnProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesOnProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesOnProductsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriesOnProducts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoriesOnProductsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends productArgs = {}>(args?: Subset<T, productArgs>): CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>;

    category<T extends categoryArgs = {}>(args?: Subset<T, categoryArgs>): CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CategoriesOnProducts findUnique
   */
  export type CategoriesOnProductsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnProducts
    **/
    select?: CategoriesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoriesOnProductsInclude | null
    /**
     * Throw an Error if a CategoriesOnProducts can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CategoriesOnProducts to fetch.
    **/
    where: CategoriesOnProductsWhereUniqueInput
  }


  /**
   * CategoriesOnProducts findFirst
   */
  export type CategoriesOnProductsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnProducts
    **/
    select?: CategoriesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoriesOnProductsInclude | null
    /**
     * Throw an Error if a CategoriesOnProducts can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CategoriesOnProducts to fetch.
    **/
    where?: CategoriesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnProducts to fetch.
    **/
    orderBy?: Enumerable<CategoriesOnProductsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriesOnProducts.
    **/
    cursor?: CategoriesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnProducts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnProducts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriesOnProducts.
    **/
    distinct?: Enumerable<CategoriesOnProductsScalarFieldEnum>
  }


  /**
   * CategoriesOnProducts findMany
   */
  export type CategoriesOnProductsFindManyArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnProducts
    **/
    select?: CategoriesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoriesOnProductsInclude | null
    /**
     * Filter, which CategoriesOnProducts to fetch.
    **/
    where?: CategoriesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnProducts to fetch.
    **/
    orderBy?: Enumerable<CategoriesOnProductsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriesOnProducts.
    **/
    cursor?: CategoriesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnProducts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnProducts.
    **/
    skip?: number
    distinct?: Enumerable<CategoriesOnProductsScalarFieldEnum>
  }


  /**
   * CategoriesOnProducts create
   */
  export type CategoriesOnProductsCreateArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnProducts
    **/
    select?: CategoriesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoriesOnProductsInclude | null
    /**
     * The data needed to create a CategoriesOnProducts.
    **/
    data: XOR<CategoriesOnProductsCreateInput, CategoriesOnProductsUncheckedCreateInput>
  }


  /**
   * CategoriesOnProducts createMany
   */
  export type CategoriesOnProductsCreateManyArgs = {
    data: Enumerable<CategoriesOnProductsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CategoriesOnProducts update
   */
  export type CategoriesOnProductsUpdateArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnProducts
    **/
    select?: CategoriesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoriesOnProductsInclude | null
    /**
     * The data needed to update a CategoriesOnProducts.
    **/
    data: XOR<CategoriesOnProductsUpdateInput, CategoriesOnProductsUncheckedUpdateInput>
    /**
     * Choose, which CategoriesOnProducts to update.
    **/
    where: CategoriesOnProductsWhereUniqueInput
  }


  /**
   * CategoriesOnProducts updateMany
   */
  export type CategoriesOnProductsUpdateManyArgs = {
    data: XOR<CategoriesOnProductsUpdateManyMutationInput, CategoriesOnProductsUncheckedUpdateManyInput>
    where?: CategoriesOnProductsWhereInput
  }


  /**
   * CategoriesOnProducts upsert
   */
  export type CategoriesOnProductsUpsertArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnProducts
    **/
    select?: CategoriesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoriesOnProductsInclude | null
    /**
     * The filter to search for the CategoriesOnProducts to update in case it exists.
    **/
    where: CategoriesOnProductsWhereUniqueInput
    /**
     * In case the CategoriesOnProducts found by the `where` argument doesn't exist, create a new CategoriesOnProducts with this data.
    **/
    create: XOR<CategoriesOnProductsCreateInput, CategoriesOnProductsUncheckedCreateInput>
    /**
     * In case the CategoriesOnProducts was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CategoriesOnProductsUpdateInput, CategoriesOnProductsUncheckedUpdateInput>
  }


  /**
   * CategoriesOnProducts delete
   */
  export type CategoriesOnProductsDeleteArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnProducts
    **/
    select?: CategoriesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoriesOnProductsInclude | null
    /**
     * Filter which CategoriesOnProducts to delete.
    **/
    where: CategoriesOnProductsWhereUniqueInput
  }


  /**
   * CategoriesOnProducts deleteMany
   */
  export type CategoriesOnProductsDeleteManyArgs = {
    where?: CategoriesOnProductsWhereInput
  }


  /**
   * CategoriesOnProducts without action
   */
  export type CategoriesOnProductsArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnProducts
    **/
    select?: CategoriesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoriesOnProductsInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    ID: number | null
  }

  export type UserSumAggregateOutputType = {
    ID: number | null
  }

  export type UserMinAggregateOutputType = {
    ID: number | null
    username: string | null
    password: string | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    ID: number | null
    username: string | null
    password: string | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    ID: number
    username: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    ID?: true
  }

  export type UserSumAggregateInputType = {
    ID?: true
  }

  export type UserMinAggregateInputType = {
    ID?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    ID?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    ID?: true
    username?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: UserCountAggregateInputType | true
    avg?: UserAvgAggregateInputType
    sum?: UserSumAggregateInputType
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    ID: number
    username: string
    password: string
    role: string
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<Array<
    PickArray<UserGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof UserGroupByOutputType))]: GetScalarType<T[P], UserGroupByOutputType[P]>
    }
  >>
    

  export type userSelect = {
    ID?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    orders?: boolean | ordersFindManyArgs
  }

  export type userInclude = {
    orders?: boolean | ordersFindManyArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'orders'
        ? Array < ordersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user ?user [P]
  : 
          P extends 'orders'
        ? Array < ordersGetPayload<S['select'][P]>>  : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const userWithIDOnly = await prisma.user.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    orders<T extends ordersFindManyArgs = {}>(args?: Subset<T, ordersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<orders>>, PrismaPromise<Array<ordersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoryScalarFieldEnum: {
    ID: 'ID',
    name: 'name',
    description: 'description'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    ID: 'ID',
    Shipping_Address: 'Shipping_Address',
    Shipping_Date: 'Shipping_Date',
    ProductID: 'ProductID',
    userID: 'userID'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    ID: 'ID',
    name: 'name',
    description: 'description',
    UnitsinStock: 'UnitsinStock',
    PicturePath: 'PicturePath'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const CategoriesOnProductsScalarFieldEnum: {
    productID: 'productID',
    categoryID: 'categoryID'
  };

  export type CategoriesOnProductsScalarFieldEnum = (typeof CategoriesOnProductsScalarFieldEnum)[keyof typeof CategoriesOnProductsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    ID: 'ID',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type categoryWhereInput = {
    AND?: Enumerable<categoryWhereInput>
    OR?: Enumerable<categoryWhereInput>
    NOT?: Enumerable<categoryWhereInput>
    ID?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    products?: CategoriesOnProductsListRelationFilter
  }

  export type categoryOrderByInput = {
    ID?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type categoryWhereUniqueInput = {
    ID?: number
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoryScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type ordersWhereInput = {
    AND?: Enumerable<ordersWhereInput>
    OR?: Enumerable<ordersWhereInput>
    NOT?: Enumerable<ordersWhereInput>
    ID?: IntFilter | number
    Shipping_Address?: StringFilter | string
    Shipping_Date?: DateTimeFilter | Date | string
    product?: XOR<ProductRelationFilter, productWhereInput>
    ProductID?: IntFilter | number
    user?: XOR<UserRelationFilter, userWhereInput> | null
    userID?: IntFilter | number
  }

  export type ordersOrderByInput = {
    ID?: SortOrder
    Shipping_Address?: SortOrder
    Shipping_Date?: SortOrder
    ProductID?: SortOrder
    userID?: SortOrder
  }

  export type ordersWhereUniqueInput = {
    ID?: number
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ordersScalarWhereWithAggregatesInput>
    OR?: Enumerable<ordersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ordersScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    Shipping_Address?: StringWithAggregatesFilter | string
    Shipping_Date?: DateTimeWithAggregatesFilter | Date | string
    ProductID?: IntWithAggregatesFilter | number
    userID?: IntWithAggregatesFilter | number
  }

  export type productWhereInput = {
    AND?: Enumerable<productWhereInput>
    OR?: Enumerable<productWhereInput>
    NOT?: Enumerable<productWhereInput>
    ID?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    UnitsinStock?: IntFilter | number
    PicturePath?: StringFilter | string
    categories?: CategoriesOnProductsListRelationFilter
    orders?: OrdersListRelationFilter
  }

  export type productOrderByInput = {
    ID?: SortOrder
    name?: SortOrder
    description?: SortOrder
    UnitsinStock?: SortOrder
    PicturePath?: SortOrder
  }

  export type productWhereUniqueInput = {
    ID?: number
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productScalarWhereWithAggregatesInput>
    OR?: Enumerable<productScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    UnitsinStock?: IntWithAggregatesFilter | number
    PicturePath?: StringWithAggregatesFilter | string
  }

  export type CategoriesOnProductsWhereInput = {
    AND?: Enumerable<CategoriesOnProductsWhereInput>
    OR?: Enumerable<CategoriesOnProductsWhereInput>
    NOT?: Enumerable<CategoriesOnProductsWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
    productID?: IntFilter | number
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
    categoryID?: IntFilter | number
  }

  export type CategoriesOnProductsOrderByInput = {
    productID?: SortOrder
    categoryID?: SortOrder
  }

  export type CategoriesOnProductsWhereUniqueInput = {
    productID_categoryID?: CategoriesOnProductsProductIDCategoryIDCompoundUniqueInput
  }

  export type CategoriesOnProductsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoriesOnProductsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoriesOnProductsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoriesOnProductsScalarWhereWithAggregatesInput>
    productID?: IntWithAggregatesFilter | number
    categoryID?: IntWithAggregatesFilter | number
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    ID?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    role?: StringFilter | string
    orders?: OrdersListRelationFilter
  }

  export type userOrderByInput = {
    ID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type userWhereUniqueInput = {
    ID?: number
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
  }

  export type categoryCreateInput = {
    ID: number
    name: string
    description: string
    products?: CategoriesOnProductsCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    ID: number
    name: string
    description: string
    products?: CategoriesOnProductsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    products?: CategoriesOnProductsUpdateManyWithoutCategoryInput
  }

  export type categoryUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    products?: CategoriesOnProductsUncheckedUpdateManyWithoutCategoryInput
  }

  export type categoryCreateManyInput = {
    ID: number
    name: string
    description: string
  }

  export type categoryUpdateManyMutationInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ordersCreateInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    product: productCreateNestedOneWithoutOrdersInput
    user?: userCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    ProductID: number
    userID: number
  }

  export type ordersUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUpdateOneRequiredWithoutOrdersInput
    user?: userUpdateOneWithoutOrdersInput
  }

  export type ordersUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductID?: IntFieldUpdateOperationsInput | number
    userID?: IntFieldUpdateOperationsInput | number
  }

  export type ordersCreateManyInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    ProductID: number
    userID: number
  }

  export type ordersUpdateManyMutationInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductID?: IntFieldUpdateOperationsInput | number
    userID?: IntFieldUpdateOperationsInput | number
  }

  export type productCreateInput = {
    ID: number
    name: string
    description: string
    UnitsinStock: number
    PicturePath: string
    categories?: CategoriesOnProductsCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    ID: number
    name: string
    description: string
    UnitsinStock: number
    PicturePath: string
    categories?: CategoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UnitsinStock?: IntFieldUpdateOperationsInput | number
    PicturePath?: StringFieldUpdateOperationsInput | string
    categories?: CategoriesOnProductsUpdateManyWithoutProductInput
    orders?: ordersUpdateManyWithoutProductInput
  }

  export type productUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UnitsinStock?: IntFieldUpdateOperationsInput | number
    PicturePath?: StringFieldUpdateOperationsInput | string
    categories?: CategoriesOnProductsUncheckedUpdateManyWithoutProductInput
    orders?: ordersUncheckedUpdateManyWithoutProductInput
  }

  export type productCreateManyInput = {
    ID: number
    name: string
    description: string
    UnitsinStock: number
    PicturePath: string
  }

  export type productUpdateManyMutationInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UnitsinStock?: IntFieldUpdateOperationsInput | number
    PicturePath?: StringFieldUpdateOperationsInput | string
  }

  export type productUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UnitsinStock?: IntFieldUpdateOperationsInput | number
    PicturePath?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnProductsCreateInput = {
    product: productCreateNestedOneWithoutCategoriesInput
    category: categoryCreateNestedOneWithoutProductsInput
  }

  export type CategoriesOnProductsUncheckedCreateInput = {
    productID: number
    categoryID: number
  }

  export type CategoriesOnProductsUpdateInput = {
    product?: productUpdateOneRequiredWithoutCategoriesInput
    category?: categoryUpdateOneRequiredWithoutProductsInput
  }

  export type CategoriesOnProductsUncheckedUpdateInput = {
    productID?: IntFieldUpdateOperationsInput | number
    categoryID?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnProductsCreateManyInput = {
    productID: number
    categoryID: number
  }

  export type CategoriesOnProductsUpdateManyMutationInput = {

  }

  export type CategoriesOnProductsUncheckedUpdateManyInput = {
    productID?: IntFieldUpdateOperationsInput | number
    categoryID?: IntFieldUpdateOperationsInput | number
  }

  export type userCreateInput = {
    ID: number
    username: string
    password: string
    role: string
    orders?: ordersCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    ID: number
    username: string
    password: string
    role: string
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    orders?: ordersUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    orders?: ordersUncheckedUpdateManyWithoutUserInput
  }

  export type userCreateManyInput = {
    ID: number
    username: string
    password: string
    role: string
  }

  export type userUpdateManyMutationInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type CategoriesOnProductsListRelationFilter = {
    every?: CategoriesOnProductsWhereInput
    some?: CategoriesOnProductsWhereInput
    none?: CategoriesOnProductsWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type UserRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type CategoryRelationFilter = {
    is?: categoryWhereInput
    isNot?: categoryWhereInput
  }

  export type CategoriesOnProductsProductIDCategoryIDCompoundUniqueInput = {
    productID: number
    categoryID: number
  }

  export type CategoriesOnProductsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnProductsCreateWithoutCategoryInput>, Enumerable<CategoriesOnProductsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnProductsCreateOrConnectWithoutCategoryInput>
    createMany?: CategoriesOnProductsCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
  }

  export type CategoriesOnProductsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnProductsCreateWithoutCategoryInput>, Enumerable<CategoriesOnProductsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnProductsCreateOrConnectWithoutCategoryInput>
    createMany?: CategoriesOnProductsCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CategoriesOnProductsUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnProductsCreateWithoutCategoryInput>, Enumerable<CategoriesOnProductsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnProductsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoriesOnProductsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: CategoriesOnProductsCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    set?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    update?: Enumerable<CategoriesOnProductsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoriesOnProductsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoriesOnProductsScalarWhereInput>
  }

  export type CategoriesOnProductsUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnProductsCreateWithoutCategoryInput>, Enumerable<CategoriesOnProductsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnProductsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoriesOnProductsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: CategoriesOnProductsCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    set?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    update?: Enumerable<CategoriesOnProductsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoriesOnProductsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoriesOnProductsScalarWhereInput>
  }

  export type productCreateNestedOneWithoutOrdersInput = {
    create?: XOR<productCreateWithoutOrdersInput, productUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: productCreateOrConnectWithoutOrdersInput
    connect?: productWhereUniqueInput
  }

  export type userCreateNestedOneWithoutOrdersInput = {
    create?: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: userCreateOrConnectWithoutOrdersInput
    connect?: userWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type productUpdateOneRequiredWithoutOrdersInput = {
    create?: XOR<productCreateWithoutOrdersInput, productUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: productCreateOrConnectWithoutOrdersInput
    upsert?: productUpsertWithoutOrdersInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutOrdersInput, productUncheckedUpdateWithoutOrdersInput>
  }

  export type userUpdateOneWithoutOrdersInput = {
    create?: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: userCreateOrConnectWithoutOrdersInput
    upsert?: userUpsertWithoutOrdersInput
    connect?: userWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<userUpdateWithoutOrdersInput, userUncheckedUpdateWithoutOrdersInput>
  }

  export type CategoriesOnProductsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CategoriesOnProductsCreateWithoutProductInput>, Enumerable<CategoriesOnProductsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CategoriesOnProductsCreateOrConnectWithoutProductInput>
    createMany?: CategoriesOnProductsCreateManyProductInputEnvelope
    connect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
  }

  export type ordersCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<ordersCreateWithoutProductInput>, Enumerable<ordersUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutProductInput>
    createMany?: ordersCreateManyProductInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type CategoriesOnProductsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CategoriesOnProductsCreateWithoutProductInput>, Enumerable<CategoriesOnProductsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CategoriesOnProductsCreateOrConnectWithoutProductInput>
    createMany?: CategoriesOnProductsCreateManyProductInputEnvelope
    connect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
  }

  export type ordersUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<ordersCreateWithoutProductInput>, Enumerable<ordersUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutProductInput>
    createMany?: ordersCreateManyProductInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type CategoriesOnProductsUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<CategoriesOnProductsCreateWithoutProductInput>, Enumerable<CategoriesOnProductsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CategoriesOnProductsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CategoriesOnProductsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: CategoriesOnProductsCreateManyProductInputEnvelope
    connect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    set?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    update?: Enumerable<CategoriesOnProductsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CategoriesOnProductsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CategoriesOnProductsScalarWhereInput>
  }

  export type ordersUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<ordersCreateWithoutProductInput>, Enumerable<ordersUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutProductInput>
    createMany?: ordersCreateManyProductInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type CategoriesOnProductsUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<CategoriesOnProductsCreateWithoutProductInput>, Enumerable<CategoriesOnProductsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CategoriesOnProductsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CategoriesOnProductsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: CategoriesOnProductsCreateManyProductInputEnvelope
    connect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    set?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnProductsWhereUniqueInput>
    update?: Enumerable<CategoriesOnProductsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CategoriesOnProductsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CategoriesOnProductsScalarWhereInput>
  }

  export type ordersUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<ordersCreateWithoutProductInput>, Enumerable<ordersUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutProductInput>
    createMany?: ordersCreateManyProductInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type productCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<productCreateWithoutCategoriesInput, productUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: productCreateOrConnectWithoutCategoriesInput
    connect?: productWhereUniqueInput
  }

  export type categoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProductsInput
    connect?: categoryWhereUniqueInput
  }

  export type productUpdateOneRequiredWithoutCategoriesInput = {
    create?: XOR<productCreateWithoutCategoriesInput, productUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: productCreateOrConnectWithoutCategoriesInput
    upsert?: productUpsertWithoutCategoriesInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutCategoriesInput, productUncheckedUpdateWithoutCategoriesInput>
  }

  export type categoryUpdateOneRequiredWithoutProductsInput = {
    create?: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProductsInput
    upsert?: categoryUpsertWithoutProductsInput
    connect?: categoryWhereUniqueInput
    update?: XOR<categoryUpdateWithoutProductsInput, categoryUncheckedUpdateWithoutProductsInput>
  }

  export type ordersCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ordersCreateWithoutUserInput>, Enumerable<ordersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutUserInput>
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type ordersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ordersCreateWithoutUserInput>, Enumerable<ordersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutUserInput>
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type ordersUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ordersCreateWithoutUserInput>, Enumerable<ordersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type ordersUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ordersCreateWithoutUserInput>, Enumerable<ordersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type CategoriesOnProductsCreateWithoutCategoryInput = {
    product: productCreateNestedOneWithoutCategoriesInput
  }

  export type CategoriesOnProductsUncheckedCreateWithoutCategoryInput = {
    productID: number
  }

  export type CategoriesOnProductsCreateOrConnectWithoutCategoryInput = {
    where: CategoriesOnProductsWhereUniqueInput
    create: XOR<CategoriesOnProductsCreateWithoutCategoryInput, CategoriesOnProductsUncheckedCreateWithoutCategoryInput>
  }

  export type CategoriesOnProductsCreateManyCategoryInputEnvelope = {
    data: Enumerable<CategoriesOnProductsCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type CategoriesOnProductsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CategoriesOnProductsWhereUniqueInput
    update: XOR<CategoriesOnProductsUpdateWithoutCategoryInput, CategoriesOnProductsUncheckedUpdateWithoutCategoryInput>
    create: XOR<CategoriesOnProductsCreateWithoutCategoryInput, CategoriesOnProductsUncheckedCreateWithoutCategoryInput>
  }

  export type CategoriesOnProductsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CategoriesOnProductsWhereUniqueInput
    data: XOR<CategoriesOnProductsUpdateWithoutCategoryInput, CategoriesOnProductsUncheckedUpdateWithoutCategoryInput>
  }

  export type CategoriesOnProductsUpdateManyWithWhereWithoutCategoryInput = {
    where: CategoriesOnProductsScalarWhereInput
    data: XOR<CategoriesOnProductsUpdateManyMutationInput, CategoriesOnProductsUncheckedUpdateManyWithoutProductsInput>
  }

  export type CategoriesOnProductsScalarWhereInput = {
    AND?: Enumerable<CategoriesOnProductsScalarWhereInput>
    OR?: Enumerable<CategoriesOnProductsScalarWhereInput>
    NOT?: Enumerable<CategoriesOnProductsScalarWhereInput>
    productID?: IntFilter | number
    categoryID?: IntFilter | number
  }

  export type productCreateWithoutOrdersInput = {
    ID: number
    name: string
    description: string
    UnitsinStock: number
    PicturePath: string
    categories?: CategoriesOnProductsCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutOrdersInput = {
    ID: number
    name: string
    description: string
    UnitsinStock: number
    PicturePath: string
    categories?: CategoriesOnProductsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutOrdersInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutOrdersInput, productUncheckedCreateWithoutOrdersInput>
  }

  export type userCreateWithoutOrdersInput = {
    ID: number
    username: string
    password: string
    role: string
  }

  export type userUncheckedCreateWithoutOrdersInput = {
    ID: number
    username: string
    password: string
    role: string
  }

  export type userCreateOrConnectWithoutOrdersInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
  }

  export type productUpsertWithoutOrdersInput = {
    update: XOR<productUpdateWithoutOrdersInput, productUncheckedUpdateWithoutOrdersInput>
    create: XOR<productCreateWithoutOrdersInput, productUncheckedCreateWithoutOrdersInput>
  }

  export type productUpdateWithoutOrdersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UnitsinStock?: IntFieldUpdateOperationsInput | number
    PicturePath?: StringFieldUpdateOperationsInput | string
    categories?: CategoriesOnProductsUpdateManyWithoutProductInput
  }

  export type productUncheckedUpdateWithoutOrdersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UnitsinStock?: IntFieldUpdateOperationsInput | number
    PicturePath?: StringFieldUpdateOperationsInput | string
    categories?: CategoriesOnProductsUncheckedUpdateManyWithoutProductInput
  }

  export type userUpsertWithoutOrdersInput = {
    update: XOR<userUpdateWithoutOrdersInput, userUncheckedUpdateWithoutOrdersInput>
    create: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
  }

  export type userUpdateWithoutOrdersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateWithoutOrdersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnProductsCreateWithoutProductInput = {
    category: categoryCreateNestedOneWithoutProductsInput
  }

  export type CategoriesOnProductsUncheckedCreateWithoutProductInput = {
    categoryID: number
  }

  export type CategoriesOnProductsCreateOrConnectWithoutProductInput = {
    where: CategoriesOnProductsWhereUniqueInput
    create: XOR<CategoriesOnProductsCreateWithoutProductInput, CategoriesOnProductsUncheckedCreateWithoutProductInput>
  }

  export type CategoriesOnProductsCreateManyProductInputEnvelope = {
    data: Enumerable<CategoriesOnProductsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutProductInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    user?: userCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutProductInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    userID: number
  }

  export type ordersCreateOrConnectWithoutProductInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutProductInput, ordersUncheckedCreateWithoutProductInput>
  }

  export type ordersCreateManyProductInputEnvelope = {
    data: Enumerable<ordersCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type CategoriesOnProductsUpsertWithWhereUniqueWithoutProductInput = {
    where: CategoriesOnProductsWhereUniqueInput
    update: XOR<CategoriesOnProductsUpdateWithoutProductInput, CategoriesOnProductsUncheckedUpdateWithoutProductInput>
    create: XOR<CategoriesOnProductsCreateWithoutProductInput, CategoriesOnProductsUncheckedCreateWithoutProductInput>
  }

  export type CategoriesOnProductsUpdateWithWhereUniqueWithoutProductInput = {
    where: CategoriesOnProductsWhereUniqueInput
    data: XOR<CategoriesOnProductsUpdateWithoutProductInput, CategoriesOnProductsUncheckedUpdateWithoutProductInput>
  }

  export type CategoriesOnProductsUpdateManyWithWhereWithoutProductInput = {
    where: CategoriesOnProductsScalarWhereInput
    data: XOR<CategoriesOnProductsUpdateManyMutationInput, CategoriesOnProductsUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type ordersUpsertWithWhereUniqueWithoutProductInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutProductInput, ordersUncheckedUpdateWithoutProductInput>
    create: XOR<ordersCreateWithoutProductInput, ordersUncheckedCreateWithoutProductInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutProductInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutProductInput, ordersUncheckedUpdateWithoutProductInput>
  }

  export type ordersUpdateManyWithWhereWithoutProductInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type ordersScalarWhereInput = {
    AND?: Enumerable<ordersScalarWhereInput>
    OR?: Enumerable<ordersScalarWhereInput>
    NOT?: Enumerable<ordersScalarWhereInput>
    ID?: IntFilter | number
    Shipping_Address?: StringFilter | string
    Shipping_Date?: DateTimeFilter | Date | string
    ProductID?: IntFilter | number
    userID?: IntFilter | number
  }

  export type productCreateWithoutCategoriesInput = {
    ID: number
    name: string
    description: string
    UnitsinStock: number
    PicturePath: string
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCategoriesInput = {
    ID: number
    name: string
    description: string
    UnitsinStock: number
    PicturePath: string
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCategoriesInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCategoriesInput, productUncheckedCreateWithoutCategoriesInput>
  }

  export type categoryCreateWithoutProductsInput = {
    ID: number
    name: string
    description: string
  }

  export type categoryUncheckedCreateWithoutProductsInput = {
    ID: number
    name: string
    description: string
  }

  export type categoryCreateOrConnectWithoutProductsInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
  }

  export type productUpsertWithoutCategoriesInput = {
    update: XOR<productUpdateWithoutCategoriesInput, productUncheckedUpdateWithoutCategoriesInput>
    create: XOR<productCreateWithoutCategoriesInput, productUncheckedCreateWithoutCategoriesInput>
  }

  export type productUpdateWithoutCategoriesInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UnitsinStock?: IntFieldUpdateOperationsInput | number
    PicturePath?: StringFieldUpdateOperationsInput | string
    orders?: ordersUpdateManyWithoutProductInput
  }

  export type productUncheckedUpdateWithoutCategoriesInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UnitsinStock?: IntFieldUpdateOperationsInput | number
    PicturePath?: StringFieldUpdateOperationsInput | string
    orders?: ordersUncheckedUpdateManyWithoutProductInput
  }

  export type categoryUpsertWithoutProductsInput = {
    update: XOR<categoryUpdateWithoutProductsInput, categoryUncheckedUpdateWithoutProductsInput>
    create: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
  }

  export type categoryUpdateWithoutProductsInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateWithoutProductsInput = {
    ID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ordersCreateWithoutUserInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    product: productCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutUserInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    ProductID: number
  }

  export type ordersCreateOrConnectWithoutUserInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput>
  }

  export type ordersCreateManyUserInputEnvelope = {
    data: Enumerable<ordersCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithWhereUniqueWithoutUserInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutUserInput, ordersUncheckedUpdateWithoutUserInput>
    create: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutUserInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutUserInput, ordersUncheckedUpdateWithoutUserInput>
  }

  export type ordersUpdateManyWithWhereWithoutUserInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type CategoriesOnProductsCreateManyCategoryInput = {
    productID: number
  }

  export type CategoriesOnProductsUpdateWithoutCategoryInput = {
    product?: productUpdateOneRequiredWithoutCategoriesInput
  }

  export type CategoriesOnProductsUncheckedUpdateWithoutCategoryInput = {
    productID?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnProductsUncheckedUpdateManyWithoutProductsInput = {
    productID?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnProductsCreateManyProductInput = {
    categoryID: number
  }

  export type ordersCreateManyProductInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    userID: number
  }

  export type CategoriesOnProductsUpdateWithoutProductInput = {
    category?: categoryUpdateOneRequiredWithoutProductsInput
  }

  export type CategoriesOnProductsUncheckedUpdateWithoutProductInput = {
    categoryID?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnProductsUncheckedUpdateManyWithoutCategoriesInput = {
    categoryID?: IntFieldUpdateOperationsInput | number
  }

  export type ordersUpdateWithoutProductInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutOrdersInput
  }

  export type ordersUncheckedUpdateWithoutProductInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: IntFieldUpdateOperationsInput | number
  }

  export type ordersUncheckedUpdateManyWithoutOrdersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: IntFieldUpdateOperationsInput | number
  }

  export type ordersCreateManyUserInput = {
    ID: number
    Shipping_Address: string
    Shipping_Date: Date | string
    ProductID: number
  }

  export type ordersUpdateWithoutUserInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUpdateOneRequiredWithoutOrdersInput
  }

  export type ordersUncheckedUpdateWithoutUserInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Shipping_Address?: StringFieldUpdateOperationsInput | string
    Shipping_Date?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductID?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}